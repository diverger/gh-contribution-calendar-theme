name: Release Action

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0 or v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from input
        id: version
        run: |
          INPUT_VERSION="${{ inputs.version }}"
          
          # Add 'v' prefix if not present
          if [[ "$INPUT_VERSION" =~ ^v ]]; then
            VERSION="$INPUT_VERSION"
          else
            VERSION="v$INPUT_VERSION"
          fi
          
          echo "Input version: $INPUT_VERSION"
          echo "Final version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DCKR_USR }}
          password: ${{ secrets.DCKR_PAT }}

      - name: Set image name
        id: repo
        run: |
          echo "name=${{ github.repository_owner }}/gh-contribution-calendar-theme" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ steps.repo.outputs.name }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
            type=sha,format=long

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get image digest
        id: digest
        run: |
          # Extract the sha256 digest from the build output
          DIGEST="${{ steps.build.outputs.digest }}"
          echo "value=$DIGEST" >> $GITHUB_OUTPUT
          echo "=== Image Digest Extracted ==="
          echo "Digest: $DIGEST"

          # Verify it was saved
          if [ -z "$DIGEST" ]; then
            echo "ERROR: Digest is empty!"
            exit 1
          fi

      - name: Update action.yml with image digest
        run: |
          DIGEST="${{ steps.digest.value }}"
          IMAGE_NAME="${{ steps.repo.outputs.name }}"
          IMAGE_REF="docker://docker.io/${IMAGE_NAME}@${DIGEST}"

          echo "=== Before Update ==="
          cat action.yml | grep -A 2 "image:"

          echo ""
          echo "=== Updating with: ${IMAGE_REF} ==="

          # Update the image line in action.yml
          sed -i "s|^  image:.*|  image: '${IMAGE_REF}'|" action.yml

          echo ""
          echo "=== After Update ==="
          cat action.yml | grep -A 2 "image:"

      - name: Commit updated action.yml and update all version tags
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "=== Git Status Before Add ==="
          git status

          git add action.yml

          echo ""
          echo "=== Git Diff Staged ==="
          git diff --staged

          # Check if there are changes to commit
          if ! git diff --quiet --cached; then
            echo ""
            echo "=== Changes detected, committing... ==="
            git commit -m "chore: update action.yml with image digest for ${{ steps.version.outputs.version }}"

            VERSION=${{ steps.version.outputs.version }}

            echo ""
            echo "=== Version Processing ==="
            echo "VERSION=$VERSION"

            # Update the patch version tag to point to the new commit
            git tag -fa $VERSION -m "Release $VERSION with updated action.yml"
            git push origin $VERSION --force

            echo "Updated and pushed tag $VERSION with new action.yml"

            # Only update major/minor tags for full semver (v1.0.0 format)
            echo ""
            echo "=== Checking version format ==="
            if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "âœ“ Version matches semver pattern: $VERSION"
              MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
              MINOR_VERSION=$(echo $VERSION | cut -d. -f1-2)

              echo "MAJOR_VERSION=$MAJOR_VERSION"
              echo "MINOR_VERSION=$MINOR_VERSION"

              # Update major version tag (e.g., v1 for v1.0.0)
              echo ""
              echo "Creating/updating major tag: $MAJOR_VERSION"
              git tag -fa $MAJOR_VERSION -m "Update $MAJOR_VERSION tag to $VERSION"
              git push origin $MAJOR_VERSION --force
              echo "âœ“ Updated tag: $MAJOR_VERSION -> $VERSION"

              # Update minor version tag (e.g., v1.0 for v1.0.0)
              echo ""
              echo "Creating/updating minor tag: $MINOR_VERSION"
              git tag -fa $MINOR_VERSION -m "Update $MINOR_VERSION tag to $VERSION"
              git push origin $MINOR_VERSION --force
              echo "âœ“ Updated tag: $MINOR_VERSION -> $VERSION"

              echo ""
              echo "=== All tags created successfully ==="
              git tag -l "v*" | sort -V
            else
              echo "âœ— Version does not match semver pattern (v1.0.0): $VERSION"
              echo "Skipping major/minor tag update"
            fi
          else
            echo ""
            echo "=== ERROR: No changes to action.yml detected! ==="
            echo "This means the sed command didn't work!"
            exit 1
          fi

      - name: Generate release notes
        if: inputs.create_release == true
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## ðŸŽ¨ GitHub Contribution Calendar Theme Detector

          ### Docker Image

          ```
          docker.io/${{ steps.repo.outputs.name }}@${{ steps.digest.value }}
          ```

          ### What's Changed

          - Docker image published to Docker Hub
          - Image digest: `${{ steps.digest.value }}`
          - Image tags:
            - `docker.io/${{ steps.repo.outputs.name }}:${{ steps.version.outputs.version_number }}`
            - `docker.io/${{ steps.repo.outputs.name }}:latest`

          ### Usage

          ```yaml
          - uses: ${{ github.repository }}@${{ steps.version.outputs.version }}
            with:
              github-username: octocat
          ```

          **Available Version Tags:**
          - `v${{ steps.version.outputs.version_number }}` (patch version - specific release)
          - `v1.0` (minor version - latest patch in minor)
          - `v1` (major version - latest release in major)
          EOF

      - name: Create Release with Auto-generated Notes
        if: inputs.create_release == true
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          bodyFile: release_notes.md
          generateReleaseNotes: true
          draft: false
          prerelease: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
