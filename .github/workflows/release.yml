name: Release Action

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v2.1.3, etc.
      - 'v*.*'    # v1.0, v2.1, etc.
      - 'v*'      # v1, v2, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Triggered by tag push
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Triggered manually
            VERSION="${{ inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase the repository name
        id: repo
        run: |
          echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo.outputs.name }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
            type=sha,format=long

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get image digest
        id: digest
        run: |
          # Extract the sha256 digest from the build output
          DIGEST="${{ steps.build.outputs.digest }}"
          echo "value=$DIGEST" >> $GITHUB_OUTPUT
          echo "Image digest: $DIGEST"

      - name: Update action.yml with image digest
        run: |
          DIGEST="${{ steps.digest.value }}"
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_REF="docker://ghcr.io/${REPO_LOWER}@${DIGEST}"

          # Update action.yml
          sed -i "s|image:.*|image: '${IMAGE_REF}'|g" action.yml

          echo "Updated action.yml with image: ${IMAGE_REF}"
          cat action.yml

      - name: Commit updated action.yml
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add action.yml
          git diff --quiet && git diff --staged --quiet || git commit -m "chore: update action.yml with image digest for ${{ steps.version.outputs.version }}"
          git push origin HEAD:refs/heads/release-${{ steps.version.outputs.version }}

      - name: Create Release
        if: github.event_name == 'push' || inputs.create_release == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## ðŸŽ¨ GitHub Contribution Calendar Theme Detector ${{ steps.version.outputs.version }}

            ### Docker Image

            ```
            ghcr.io/${{ steps.repo.outputs.name }}@${{ steps.digest.value }}
            ```

            ### What's Changed

            - Docker image published to GitHub Container Registry
            - Image digest: `${{ steps.digest.value }}`
            - Image tags:
              - `ghcr.io/${{ steps.repo.outputs.name }}:${{ steps.version.outputs.version_number }}`
              - `ghcr.io/${{ steps.repo.outputs.name }}:latest`

            ### Usage

            ```yaml
            - uses: ${{ github.repository }}@${{ steps.version.outputs.version }}
              with:
                github-username: octocat
            ```

            **Available Version Tags:**
            - `v1.0.0` (patch version - specific release)
            - `v1.0` (minor version - latest patch in minor)
            - `v1` (major version - latest release in major)

            ### Full Changelog

            See commits since last release.
          draft: false
          prerelease: false

      - name: Update version tags
        if: github.event_name == 'push'
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Only update major/minor tags for full semver (v1.0.0 format)
          if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
            MINOR_VERSION=$(echo $VERSION | cut -d. -f1-2)

            # Update major version tag (e.g., v1 for v1.0.0)
            git tag -fa $MAJOR_VERSION -m "Update $MAJOR_VERSION tag to ${{ steps.version.outputs.version }}"
            git push origin $MAJOR_VERSION --force

            # Update minor version tag (e.g., v1.0 for v1.0.0)
            git tag -fa $MINOR_VERSION -m "Update $MINOR_VERSION tag to ${{ steps.version.outputs.version }}"
            git push origin $MINOR_VERSION --force

            echo "Updated tags: $MAJOR_VERSION, $MINOR_VERSION"
          else
            echo "Skipping major/minor tag update for non-semver tag: $VERSION"
          fi
