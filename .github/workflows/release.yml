name: Release Action

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v2.1.3, etc.
      - 'v*.*'    # v1.0, v2.1, etc.
      - 'v*'      # v1, v2, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Triggered by tag push
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Triggered manually
            VERSION="${{ inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DCKR_USR }}
          password: ${{ secrets.DCKR_PAT }}

      - name: Set image name
        id: repo
        run: |
          echo "name=${{ github.repository_owner }}/gh-contribution-calendar-theme" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ steps.repo.outputs.name }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
            type=sha,format=long

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get image digest
        id: digest
        run: |
          # Extract the sha256 digest from the build output
          DIGEST="${{ steps.build.outputs.digest }}"
          echo "value=$DIGEST" >> $GITHUB_OUTPUT
          echo "Image digest: $DIGEST"

      - name: Update action.yml with image digest
        run: |
          DIGEST="${{ steps.digest.value }}"
          IMAGE_NAME="${{ steps.repo.outputs.name }}"
          IMAGE_REF="docker://docker.io/${IMAGE_NAME}@${DIGEST}"

          echo "Updating action.yml with image: ${IMAGE_REF}"

          # Update the image line in action.yml (more precise pattern)
          sed -i "/^  image:/c\  image: '${IMAGE_REF}'" action.yml

          echo "Updated action.yml:"
          cat action.yml

      - name: Commit updated action.yml
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add action.yml

          # Check if there are changes to commit
          if ! git diff --quiet --cached; then
            git commit -m "chore: update action.yml with image digest for ${{ steps.version.outputs.version }}"

            # Update the tag to point to the new commit
            git tag -fa ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }} with updated action.yml"
            git push origin ${{ steps.version.outputs.version }} --force

            echo "Updated and pushed tag ${{ steps.version.outputs.version }} with new action.yml"
          else
            echo "No changes to action.yml"
          fi

      - name: Generate release notes
        if: github.event_name == 'push' || inputs.create_release == true
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## ðŸŽ¨ GitHub Contribution Calendar Theme Detector

          ### Docker Image

          ```
          docker.io/${{ steps.repo.outputs.name }}@${{ steps.digest.value }}
          ```

          ### What's Changed

          - Docker image published to Docker Hub
          - Image digest: `${{ steps.digest.value }}`
          - Image tags:
            - `docker.io/${{ steps.repo.outputs.name }}:${{ steps.version.outputs.version_number }}`
            - `docker.io/${{ steps.repo.outputs.name }}:latest`

          ### Usage

          ```yaml
          - uses: ${{ github.repository }}@${{ steps.version.outputs.version }}
            with:
              github-username: octocat
          ```

          **Available Version Tags:**
          - `v${{ steps.version.outputs.version_number }}` (patch version - specific release)
          - `v1.0` (minor version - latest patch in minor)
          - `v1` (major version - latest release in major)
          EOF

      - name: Create Release with Auto-generated Notes
        if: github.event_name == 'push' || inputs.create_release == true
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          bodyFile: release_notes.md
          generateReleaseNotes: true
          draft: false
          prerelease: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version tags
        if: github.event_name == 'push'
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Only update major/minor tags for full semver (v1.0.0 format)
          if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
            MINOR_VERSION=$(echo $VERSION | cut -d. -f1-2)

            # Update major version tag (e.g., v1 for v1.0.0)
            git tag -fa $MAJOR_VERSION -m "Update $MAJOR_VERSION tag to ${{ steps.version.outputs.version }}"
            git push origin $MAJOR_VERSION --force

            # Update minor version tag (e.g., v1.0 for v1.0.0)
            git tag -fa $MINOR_VERSION -m "Update $MINOR_VERSION tag to ${{ steps.version.outputs.version }}"
            git push origin $MINOR_VERSION --force

            echo "Updated tags: $MAJOR_VERSION, $MINOR_VERSION"
          else
            echo "Skipping major/minor tag update for non-semver tag: $VERSION"
          fi
