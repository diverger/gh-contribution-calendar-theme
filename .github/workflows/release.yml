name: Release Action

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0 or v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        type: boolean
        default: true
      description:
        description: "Release description"
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from input
        id: version
        run: |
          INPUT_VERSION="${{ inputs.version }}"

          # Add 'v' prefix if not present
          if [[ "$INPUT_VERSION" =~ ^v ]]; then
            VERSION="$INPUT_VERSION"
          else
            VERSION="v$INPUT_VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image name
        id: repo
        run: |
          echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo.outputs.name }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
            type=sha,format=long

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get image digest
        id: digest
        run: |
          DIGEST="${{ steps.build.outputs.digest }}"
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

          if [ -z "$DIGEST" ]; then
            echo "ERROR: Digest is empty!"
            exit 1
          fi

      - name: Update action.yml with image digest
        run: |
          DIGEST="${{ steps.digest.outputs.digest }}"
          IMAGE_NAME="${{ steps.repo.outputs.name }}"
          IMAGE_REF="docker://ghcr.io/${IMAGE_NAME}@${DIGEST}"

          sed -i "s|^[[:space:]]*image:.*|  image: '${IMAGE_REF}'|" action.yml

      - name: Commit updated action.yml and update all version tags
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add action.yml

          if ! git diff --quiet --cached; then
            git commit -m "chore: update action.yml with image digest for ${{ steps.version.outputs.version }}"

            # Push the commit to current branch
            git push origin HEAD:${{ github.ref }}

            VERSION=${{ steps.version.outputs.version }}

            # Update the patch version tag
            git tag -fa $VERSION -m "Release $VERSION"
            git push origin $VERSION --force

            # Update major/minor tags for semver (v1.0.0 format)
            if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
              MINOR_VERSION=$(echo $VERSION | cut -d. -f1-2)

              git tag -fa $MAJOR_VERSION -m "Update $MAJOR_VERSION tag to $VERSION"
              git push origin $MAJOR_VERSION --force

              git tag -fa $MINOR_VERSION -m "Update $MINOR_VERSION tag to $VERSION"
              git push origin $MINOR_VERSION --force
            fi
          else
            echo "ERROR: No changes to action.yml detected!"
            exit 1
          fi

      - name: Create Release with Auto-generated Notes
        if: inputs.create_release == true
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ github.event.inputs.description }}
          generateReleaseNotes: true
          draft: false
          prerelease: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
